<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_selectable</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

//CONFIG
facing_line_length = 24;
unit_max_speed = 2;
unit_max_thrust = 0.1;
unit_max_turnrate = 3;
unit_max_health = 5;
unit_max_damage = 1;
unit_mass = 1;

unit_turning_accel_leeway = 1;

//disable animations for sprites
image_speed = 0;

//init some vars
destination_x = x;
destination_y = y;
movement_priority = 0;
targetId = 0;
playerTarget = false;
playerMove = false;

//debug vars
desired_angle = direction;
steering_angle = direction;
steering_magnitude = 0;
thrust = false;
close_enough_to_destination = 1;
slowing_radius = 0;

//units start off facing a random direction, and on your team
facing = random(360);
direction = facing;
//speed = random(unit_max_speed);
side = global.playerside;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

//update image_angle to match the direction the unit is facing before drawing
image_angle = facing;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

var distance_to_target = point_distance(x, y, destination_x, destination_y);
if (distance_to_target &gt; close_enough_to_destination)
{
    desired_angle = point_direction(x, y, destination_x, destination_y);

    var max_accel = unit_max_thrust / unit_mass;    
    slowing_radius = power(speed, 2) / ( 2 * max_accel ) + close_enough_to_destination;

    //proceed
    if !(distance_to_target &lt;= slowing_radius &amp;&amp; withinDegrees(desired_angle, direction, unit_turning_accel_leeway))
    {
        desired_vector_x = x + lengthdir_x(min(unit_max_speed, distance_to_target), desired_angle);
        desired_vector_y = y + lengthdir_y(min(unit_max_speed, distance_to_target), desired_angle);
    }
    //start slowing down
    else
    {
        desired_vector_x = x;
        desired_vector_y = y;
    }
    
    current_vector_x = x + lengthdir_x(speed, direction);
    current_vector_y = y + lengthdir_y(speed, direction);
    
    steering_vector_x = x + desired_vector_x - current_vector_x;
    steering_vector_y = y + desired_vector_y - current_vector_y;
    
    steering_angle = point_direction(x, y, steering_vector_x, steering_vector_y);
    steering_magnitude = point_distance(x, y, steering_vector_x, steering_vector_y);
    
    steering_magnitude = min(max_accel, steering_magnitude);
 
    steering_vector_x = x + lengthdir_x(steering_magnitude, steering_angle);
    steering_vector_y = y + lengthdir_y(steering_magnitude, steering_angle);
    

    //result_vector_x = current_vector_x + steering_vector_x - x;
    //result_vector_y = current_vector_y + steering_vector_y - y;
    
    //result_angle = point_direction(x, y, result_vector_x, result_vector_y);
    
    //if facing the direction we want to accelerate in
    if (withinDegrees(facing, steering_angle, unit_turning_accel_leeway)) 
    {
        motion_add(steering_angle, steering_magnitude);
        speed = min(speed, unit_max_speed);
        thrust = true;
    }
    //if already moving in correct direction, stop minute adjustments
    else if (withinDegrees(desired_angle, direction, unit_turning_accel_leeway))
    {
        motion_add(steering_angle, steering_magnitude);
        speed = min(speed, unit_max_speed);
        thrust = true;
        turnTowards(id, direction, facing, unit_max_turnrate);
    }
    else
    {
        turnTowards(id, steering_angle, facing, unit_max_turnrate);
    }
    
}
else
{
    x = destination_x;
    y = destination_y;
    playerMove = false;
    speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_unit">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//push colliding ships away from each other until we get better pathing system
if (global.collision_on) {
    var degree = point_direction(x, y, other.x, other.y);
    x -= lengthdir_x(1, degree);
    y -= lengthdir_y(1, degree);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = room_width/2;
y = room_height/2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//parent
event_inherited();

//default
draw_self();


//draw some debug lines
var oldColor = draw_get_color();
var oldAlpha = draw_get_alpha();

//draw a line for which way the unit is facing
draw_set_color(c_black);

var target_x = x + lengthdir_x(facing_line_length, facing);
var target_y = y + lengthdir_y(facing_line_length, facing);

draw_line(x, y, target_x, target_y);

//draw a vector for the current velocity of the unit
draw_set_color(c_green);
draw_arrow(x, y, x + lengthdir_x(speed*20, direction), y + lengthdir_y(speed*20, direction), 8);

//draw a vector for the desired velocity of the unit
//draw_set_color(c_black);
//draw_arrow(x, y, x+lengthdir_x(unit_max_speed*15, desired_angle), y+lengthdir_y(unit_max_speed*15, desired_angle), 8);

//draw a vector for the desired acceleration of the unit
draw_set_color(c_purple);
draw_arrow(x, y, x+lengthdir_x(steering_magnitude*450, steering_angle), y+lengthdir_y(steering_magnitude*450, steering_angle), 8);


//draw a line for the target location of the unit
draw_set_color(c_yellow);
draw_line(x, y, destination_x, destination_y);

if (thrust)
{
    effect_create_above(ef_flare, x, y, 0, c_red);
    thrust = false;
}

draw_set_color(c_orange);
draw_set_alpha(0.10);
draw_set_blend_mode(bm_add);
draw_circle(destination_x, destination_y, slowing_radius, false);
draw_set_blend_mode(bm_normal);

draw_set_color(oldColor);
draw_set_alpha(oldAlpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
